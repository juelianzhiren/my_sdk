#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "HW_API.h"

#include "test.h"

#define STROKE_END -1

typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef unsigned int   DWORD;

unsigned int   g_abSegSentRam[936 * 1024 / 4]; //篇章识别所需要空间，包括行分割，识别，保存结果三个空间大小
DWORD adw[128];
char* g_strDicName = "com_hwrc_18030.bin";


short PINYIN_women[] = { 634, 413, 633, 413, 633, 414, 633, 415, 633, 417, 633, 419, 634, 423, 634, 427, 635, 432, 637, 438, 638, 443, 638, 447, 639, 451, 640, 454, 641, 457, 642, 459, 643, 461, 644, 462, 645, 462, 646, 462, 648, 462, 649, 460, 650, 457, 651, 454, 652, 449, 652, 445, 653, 441, 654, 436, 655, 431, 655, 427, 656, 423, 657, 420, 657, 417, 658, 415, 658, 414, 658, 413, 658, 412, 659, 413, 659, 416, 660, 419, 660, 424, 661, 429, 662, 435, 663, 440, 664, 445, 665, 448, 667, 452, 668, 454, 669, 456, 671, 457, 672, 458, 673, 458, 674, 458, 675, 458, 677, 457, 679, 454, 680, 451, 682, 448, 683, 444, 684, 439, 686, 434, 686, 429, 687, 425, 688, 422, 689, 420, 689, 418, 689, 416, 689, 414, 690, 413, 690, 412, 690, 411, 690, 410, 690, 411, 690, 408, -1, 0, 701, 422, 702, 422, 701, 424, 700, 426, 699, 429, 699, 433, 699, 437, 699, 441, 699, 444, 699, 447, 700, 449, 701, 451, 703, 453, 705, 454, 707, 454, 710, 454, 712, 454, 715, 453, 718, 451, 720, 448, 722, 445, 723, 442, 725, 440, 726, 437, 726, 433, 726, 430, 726, 426, 726, 423, 726, 420, 724, 419, 723, 417, 722, 416, 720, 416, 718, 415, 716, 415, 714, 415, 712, 414, 710, 414, 709, 414, 708, 414, 707, 414, 706, 415, 705, 416, 704, 416, 703, 415, 703, 412, -1, 0, 701, 397, 700, 397, 700, 396, 700, 397, 700, 400, 700, 403, 700, 407, 701, 409, 701, 412, 702, 414, 703, 415, 704, 416, 705, 416, 707, 416, 708, 415, 710, 414, 712, 412, 714, 410, 716, 407, 719, 405, 721, 403, 723, 401, 724, 399, 726, 397, 727, 397, 727, 395, 728, 395, 727, 395, 724, 394, -1, 0, 781, 422, 780, 422, 780, 425, 780, 429, 780, 432, 779, 436, 779, 440, 778, 442, 777, 445, 777, 447, 777, 448, 777, 445, 777, 442, 778, 438, 779, 434, 781, 429, 782, 426, 784, 423, 785, 422, 786, 421, 787, 420, 788, 420, 789, 420, 789, 421, 790, 424, 790, 428, 790, 432, 790, 436, 790, 439, 790, 442, 790, 443, 790, 445, 790, 447, 790, 448, 790, 445, 790, 442, 790, 438, 791, 435, 792, 431, 793, 429, 795, 427, 796, 425, 796, 424, 797, 423, 798, 423, 799, 423, 800, 423, 801, 424, 802, 427, 803, 430, 804, 433, 804, 437, 805, 441, 805, 444, 805, 447, 805, 449, 806, 451, 806, 453, 806, 454, 806, 455, 806, 456, 805, 452, 806, 450, -1, 0, 814, 441, 815, 441, 816, 441, 818, 440, 820, 439, 823, 438, 827, 437, 830, 436, 832, 435, 835, 435, 837, 433, 838, 431, 839, 430, 840, 429, 840, 427, 840, 426, 840, 425, 839, 423, 838, 422, 836, 421, 834, 420, 833, 420, 831, 420, 828, 421, 826, 422, 825, 424, 823, 427, 822, 430, 821, 433, 820, 436, 820, 439, 820, 441, 820, 444, 821, 445, 822, 447, 824, 448, 825, 448, 827, 449, 829, 450, 830, 450, 832, 450, 834, 450, 835, 450, 837, 450, 838, 450, 839, 450, 840, 449, 840, 447, 841, 442, -1, 0, 848, 425, 847, 425, 847, 424, 847, 425, 846, 427, 846, 432, 846, 435, 845, 438, 844, 441, 844, 442, 843, 444, 843, 445, 843, 444, 843, 442, 843, 438, 844, 435, 845, 430, 847, 427, 848, 424, 850, 422, 852, 420, 853, 419, 855, 418, 857, 417, 858, 417, 860, 417, 861, 417, 862, 417, 863, 417, 864, 419, 865, 422, 865, 426, 865, 430, 865, 434, 865, 437, 865, 440, 865, 444, 865, 446, 865, 448, 865, 449, 865, 450, 865, 451, 865, 452, 864, 454, 861, 454, 861, 453, -1, 0, 807, 409, 806, 409, 805, 409, 806, 408, 808, 408, 812, 408, 815, 408, 818, 408, 821, 408, 824, 408, 826, 407, 828, 407, 830, 407, 831, 407, 831, 408, 830, 403, -1, 0, -1, -1};

unsigned char * ReadAFile(char *strName, int *piLen)
{
	FILE *pF;
	unsigned char *pch;

	*piLen = 0;
	pF = fopen(strName, "rb");
	if (pF == NULL)
		return NULL;
	fseek(pF, 0, SEEK_END);
	*piLen = ftell(pF);
	pch = (unsigned char*)malloc(*piLen);
	fseek(pF, 0, SEEK_SET);
	fread(pch, 1, *piLen, pF);
	fclose(pF);

	return pch;
}


void nSingleLineTest()
{
	int iRst;
	char acRst[1024] = { 0 };
	unsigned short acScore[1024] = { 0 };
	int n;
	int nRowNum = 0;
	int pRowEndStrokeIdx[256] = { 0 };
	WORD* pwRst = NULL;

	memset(adw, 0, 128 * sizeof(DWORD));
	iRst = HWRC_SetWorkSpace((unsigned long  *)adw, (char *)g_abSegSentRam, SEGMENT_SENTENCE_REC_RAM_SIZE);

	BYTE* pbDic = ReadAFile(g_strDicName, &n);
	iRst = HWRC_SetRecogDic((unsigned long *)adw, (const unsigned char*)pbDic);

	iRst = HWRC_SetRecogMode((unsigned long *)adw, HWRC_PINYIN);
	iRst = HWRC_SetRecogRange((unsigned long *)adw, 0xffffffff);

	memset(g_abSegSentRam, 0, SEGMENT_SENTENCE_REC_RAM_SIZE *sizeof(char));//篇章识别前初始化
	iRst = HWRC_Recognize((unsigned long *)adw, PINYIN_women);
	iRst = HWRC_GetResult((unsigned long *)adw, 10, acRst);//获取当前行识别结果

	free(pbDic);
	pbDic = NULL;
}