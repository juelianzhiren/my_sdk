configurations {
    exclude
}

//需要排除的包名
def excludePackages = ['com.baidu']
//需要排除的类(需要全类名)
def excludeClasses = []


def unZipAarFile = new File(buildDir, "unzipaar")
def unZipJarFile = new File(buildDir, 'unzipjar')
def excludeAarFile = new File(buildDir, "excludeaar")
def excludeAarName = "exclude_${getDefaultAar().name.replaceFirst(~/\.[^.]+$/, '')}"

//1、获取到需要过滤的原始AAR包
def getDefaultAar() {
    Configuration c = configurations.getByName("exclude")
    def files = c.artifacts.files.filter {
        it.name ==~ /.*\.aar/
    }

    def file = null
    if (!files.empty) {
        file = files[0]
    }
    return file
}

task deleteDir(type: Delete) {
    delete unZipAarFile, unZipJarFile, excludeAarFile
    println "删除缓存目录 end"
}

//2、解压AAR包（zipTree配合Task Copy）
task unZipAar(type: Copy) {
    deleteDir.doLast {
        def zipFile = getDefaultAar()
        def outputDir = unZipAarFile
        from zipTree(zipFile)
        into outputDir

        println "解压aar end"
    }
}
unZipAar.dependsOn deleteDir

//3、解压AAR包中的class.jar（zipTree配合Task Copy）
task unzipJar(type: Copy) {
    deleteDir.doLast {
        def zipFile = new File(unZipAarFile, 'classes.jar')
        def outputDir = unZipJarFile
        from zipTree(zipFile)
        into outputDir

        println "解压classes.jar end"
    }
}

unzipJar.dependsOn unZipAar

//4、按照过滤规则对解压的class.jar重新打包(Task Jar)
task zipJar(type: Jar) {
    deleteDir.doLast {
        baseName = 'classes'
        from unZipJarFile
        destinationDir unZipAarFile
        exclude getExcludePackageRegex(excludePackages)
        exclude getExcludeClassRegex(excludeClasses)

        println "重新打包classes.jar end"
        println "排除的包：" + getExcludePackageRegex(excludePackages)
        println "排除的类：" + getExcludeClassRegex(excludeClasses)
    }
}

zipJar.dependsOn unzipJar

//5、重新打包成AAR包(Task Zip)
task excludeAar(type: Zip) {
    group 'ex'
    description '生成一个排除之后的aar包'

    deleteDir.doLast {
        baseName excludeAarName
        extension "aar"
        from unZipAarFile
        destinationDir excludeAarFile

        println "重新打包aar end"
    }
}

excludeAar.dependsOn zipJar

artifacts {
    exclude excludeAar
}


static def getExcludePackageRegex(def packages) {
    packages?.collect {
        it?.replace('.', '\\')?.plus("\\**")
    }
}

static def getExcludeClassRegex(def classes) {
    classes?.collect {
        it?.replace('.', '\\')?.plus(".class")
    }
}